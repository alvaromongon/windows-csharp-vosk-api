using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Processor.Abstractions;

namespace Processor.Implementations
{
    public class VoskProcessor : IProcessor
    {
        private const string ScriptToRun = "./pythonScripts/WavToText.py";
        private const string ScriptResultWordSeparator = " ";

        private readonly IProcessorConfiguration _configuration;

        public VoskProcessor(IProcessorConfiguration configuration)
        {
            this._configuration = configuration;
        }

        public Task<string[]> ProcessFromWav(string wavFilePath)
        {
            var start = new ProcessStartInfo
            {
                FileName = _configuration.PythonExeAbsolutePath,
                Arguments = $"{ScriptToRun} {wavFilePath}",

                UseShellExecute = false,// Do not use OS shell
                CreateNoWindow = true, // We don't need new window
                RedirectStandardOutput = true,// Any output, generated by application will be redirected back
                RedirectStandardError = true // Any error in standard output will be redirected back (for example exceptions)
            };

            string scriptResult = string.Empty;

            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    scriptResult = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                }
            }

            return Task.FromResult(ParseScriptResult(scriptResult));
        }

        private static string[] ParseScriptResult(string scriptResult)
        {
            var parsed = scriptResult.ToLower().Trim();

            return parsed.Split(ScriptResultWordSeparator);
        }
    }
}
